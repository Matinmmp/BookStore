import { addToCart, deleteFromCart } from '../../store/shopingCart-slice';
import { getAllProducts, getProductById } from '@/services/api/product';
import { useSelector, useDispatch } from 'react-redux';
import FlipBook from '@/components/Products/FlipBook';
import type { RootState } from '../../store/store';
import { BsBasket, BsTrash } from 'react-icons/bs';
import { separate } from '../../utils/seperator';
import "react-toastify/dist/ReactToastify.css";
import { BsChevronLeft } from 'react-icons/bs';
import { Product } from '@/models/Types';
import { toast } from 'react-toastify';
import Image from 'next/image';
import Link from 'next/link';
import Head from 'next/head';
import NumericUpDown from '@/components/Products/NumericUpDown';


interface IProps {
    product: Product
}

const ProductById = ({ product }: IProps) => {

    const cartList = useSelector((state: RootState) => state.shopingCart.cartList)
    console.log(cartList);
    
    const dispatch = useDispatch()
    const isInShopingCart = cartList.find(item => item.productId === product._id);
    const handleAddToShopingCart = () => {
        dispatch(addToCart(({ productId: product._id, count: 1, price: product.price, image: product.images[0], name: product.name })));
        toast.success(`${product.name} به سبد خرید اضافه شد.`, {
            position: "top-right",
            autoClose: 3000,
            hideProgressBar: false,
            closeOnClick: true,
        });
    }
    const handleDeleteFromShopingCart = () => {
        dispatch(deleteFromCart(({ productId: product._id, count: 1, price: product.price, image: product.images[0], name: product.name })));
        toast.success(`${product.name} از سبد خرید حذف شد .`, {
            position: "top-right",
            autoClose: 3000,
            hideProgressBar: false,
            closeOnClick: true,
        });
    }

    return (
        <main className=''>
            <Head>
                <title>{product.name}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/Images/logo2.png" />
            </Head>
            <Image alt='header' width={2000} height={1200}
                className='object-cover w-full h-[70vh] lg:h-[60vh] mt-[4rem] lg:mt-[8.5rem]'
                src={`http://localhost:8000/images/products/thumbnails/${product.thumbnail}`} />

            <div className="flex flex-col flex-wrap lg:flex-nowrap gap-2 w-full mt-[1rem] mx-auto px-4 lg:px-12 xl:px-">
                <div className="w-full flex">
                    <div className="text-md breadcrumbs">
                        <ul className='flex items-center gap-2'>
                            <li className='hover:text-primary transition-all'>
                                <Link href={`/product/${product.category._id}/new?page=1`}>{product.category.name}</Link>
                            </li>
                            <BsChevronLeft />
                            <li className='hover:text-primary transition-all'>
                                <Link href={`/product/${product.category._id}/${product.subcategory._id}/new?page=1`}>{product.subcategory.name}</Link>
                            </li>
                        </ul>
                    </div>
                </div>
                <div className="w-full px-4 py-2 flex justify-center">
                    <h1 className=' text-2xl xl:text-4xl font-semibold'>{product.name}</h1>
                </div>

                <div className='flex flex-wrap lg:flex-nowrap w-full gap-16 items-center'>

                    <div className=' flex justify-center w-full lg:block lg:w-auto'>
                        <FlipBook images={product.images} />
                    </div>
                    <div className=''>
                        <div className='flex justify-between mt-10'>
                            <div className="flex items-center gap-2 text-lg">
                                <span className='text-primary-focus'>{separate(product.price)}</span>
                                <span >تومان</span>
                            </div>
                        </div>

                        <div className="flex items-center gap-1 text-lg mt-6">
                            {product.quantity > 1 ?
                                <span className='text-green-500'>{product.quantity} عدد موجود هست</span> :
                                <span className='text-red-500'>موجود نیست</span>}
                        </div>

                        <div className="flex items-center gap-1 text-lg mt-6">
                            <span>انتشارات : </span>
                            <span>{product.brand}</span>
                        </div>

                        <div className="flex flex-wrap items-start gap-4 mt-20">
                            {!isInShopingCart ?
                                (product.quantity ?
                                    <button className='btn btn-primary'
                                        onClick={handleAddToShopingCart}>
                                        <BsBasket className="text-xl" />
                                        <div className="border-l-[1px] border-gray-200 "></div>
                                        <span className="text-md lg:text-lg font-thin">افزودن به سبد خرید</span>
                                    </button> :
                                    <button className='btn btn-primary ' disabled>
                                        <BsBasket className="text-xl" />
                                        <div className="border-l-[1px] border-gray-200 "></div>
                                        <span className="text-md lg:text-lg font-thin">افزودن به سبد خرید</span>
                                    </button>) :
                                    <NumericUpDown product={isInShopingCart} quantity={product.quantity}/>
                            }
                        </div>
                    </div>

                    <div className=''>
                        <div className="flex flex-col gap-8" dangerouslySetInnerHTML={{ __html: product.description }} />
                    </div>
                </div>
            </div>
        </main>
    )
}

export default ProductById


export const getStaticProps = async (context: any) => {
    const id = context.params.productId;
    const product = await getProductById(id);
    return {
        props: { product }
    }
}

export const getStaticPaths = async () => {
    const products = await getAllProducts();
    const paths = products.map((item) => ({ params: { productId: item._id } }));

    return {
        paths: paths,
        fallback: true
    }
}